<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hand Landmarks Display</title>
    <style>
        canvas {
            border: 1px solid black;
            margin-top: 20px;
        }
    </style>
    // https://grok.com/share/bGVnYWN5_de60a782-4026-4629-a481-60b4a32b4e09a
</head>
<body>
    <canvas id="handCanvas" width="640" height="480"></canvas>
    <script>
        const canvas = document.getElementById('handCanvas');
        const ctx = canvas.getContext('2d');
        let grabbed = false;
        const points = [];
        
        // Set up WebSocket connection
        const socket = new WebSocket('ws://localhost:8765');

        socket.onopen = () => {
            console.log("Connected to WebSocket server.");
        };

        socket.onmessage = (event) => {
            const handData = JSON.parse(event.data);
            console.log(handData);
            
            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas for the next frame
            // updateBall();
            // drawBall();

            // Draw hand landmarks
            handData.forEach(hand => {
                hand.forEach(landmark => {
                    const x = landmark.x * canvas.width;
                    const y = landmark.y * canvas.height;

                    ctx.beginPath();
                    ctx.arc(x, y, 5, 0, 2 * Math.PI);
                    ctx.fillStyle = 'red';
                    ctx.fill();
                });

                // if distance between thumb and index finger is less than 50, draw red line bw them
                const thumb = hand[0];  
                const index = hand[1];
                if(index.hand == 'Right')
                    points.push(index)
                const distance = Math.hypot(index.x - thumb.x, index.y - thumb.y);
                // if (distance < 0.1) {
                //     // ctx.beginPath();
                //     // ctx.moveTo(thumb.x * canvas.width, thumb.y * canvas.height);
                //     // ctx.lineTo(index.x * canvas.width, index.y * canvas.height);
                //     // ctx.strokeStyle = 'red';
                //     // ctx.lineWidth = 4;
                //     // ctx.stroke();
                //     ball.x = (thumb.x + index.x)/2 * canvas.width;
                //     ball.y = (thumb.y + index.y)/2 * canvas.height;
                //     grabbed = true;
                // } else {
                //     grabbed = false;
                // }
            });
            points.forEach((point, index) => {
                console.log(point);
                
                const x = point.x * canvas.width;
                const y = point.y * canvas.height;

                // ctx.beginPath();
                // ctx.arc(x, y, 2, 0, 2 * Math.PI);
                // ctx.fillStyle = 'blue';
                // ctx.fill();

                if (index > 0 && point.hand == 'Right') {
                    const prevPoint = points[index - 1];
                    const prevX = prevPoint.x * canvas.width;
                    const prevY = prevPoint.y * canvas.height;

                    ctx.beginPath();
                    ctx.moveTo(prevX, prevY);
                    ctx.lineTo(x, y);
                    ctx.strokeStyle = 'blue';
                    ctx.lineWidth = 2;
                    ctx.stroke();
                }
            });
        };

        // Create a single ball
        const ball = {
            x: canvas.width / 2,
            y: 0,
            vy: 0,
            r: 20,
            color: 'blue'
        };

        const gravity = 1;
        const friction = 0.1;

        function drawBall() {
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.r, 0, 2 * Math.PI);
            ctx.fillStyle = ball.color;
            ctx.fill();
        }

        function updateBall() {
            if(grabbed) {
                ball.vy = 0;
                return;
            }
            ball.vy += gravity;
            ball.y += ball.vy;

            if (ball.y + ball.r > canvas.height-100) {
                ball.y = canvas.height-100 - ball.r;
                ball.vy = -ball.vy * (1 - friction);
            }
        }

        socket.onerror = (error) => {
            console.error("WebSocket Error: " + error);
        };

        socket.onclose = () => {
            console.log("Disconnected from WebSocket server.");
        };

        // Animation loop
        // function animate() {
        //     ctx.clearRect(0, 0, canvas.width, canvas.height);
        //     updateBall();
        //     drawBall();
        //     requestAnimationFrame(animate);
        // }
    </script>
</body>
</html>















--------------------------------------------------------------------------------------------------------------------












import cv2
import mediapipe as mp
import asyncio
import websockets
import json

# MediaPipe setup
mp_hands = mp.solutions.hands
hands = mp_hands.Hands()
mp_drawing = mp.solutions.drawing_utils

# WebSocket server
async def hand_landmark_server(websocket):
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("Error: Could not open camera.")
        return

    while True:
        ret, frame = cap.read()

        if not ret:
            print("Error: Could not read frame.")
            break

        frame = cv2.flip(frame, 1)
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        result = hands.process(rgb_frame)

        keypoints = []
        if result.multi_hand_landmarks:
            for hand_landmarks, handedness in zip(result.multi_hand_landmarks, result.multi_handedness):
                hand_label = handedness.classification[0].label  # 'Left' or 'Right'
                hand_data = []
                # hand_data.append(hand_landmarks.landmark[4])
                # hand_data.append(hand_landmarks.landmark[8])
                # for landmark in hand_landmarks.landmark:
                hand_data.append({
                    'x': hand_landmarks.landmark[4].x,
                    'y': hand_landmarks.landmark[4].y,
                    'z': hand_landmarks.landmark[4].z,
                    'hand': hand_label
                })
                hand_data.append({
                    'x': hand_landmarks.landmark[8].x,
                    'y': hand_landmarks.landmark[8].y,
                    'z': hand_landmarks.landmark[8].z,
                    'hand': hand_label
                })
                keypoints.append(hand_data)
        
        # Send keypoints as JSON data to the browser
        if keypoints:
            await websocket.send(json.dumps(keypoints))

        await asyncio.sleep(0.016)

    cap.release()

# Start WebSocket server
async def start_server():
    async with websockets.serve(hand_landmark_server, "localhost", 8765):
        await asyncio.Future()  # run forever

if __name__ == "__main__":
    asyncio.run(start_server())













-----------------------------------------------------------------------------------------------------------------------------------------------




import cv2
import asyncio
import websockets
import json

# WebSocket server
async def hand_landmark_server(websocket):
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("Error: Could not open camera.")
        return

    while True:
        ret, frame = cap.read()

        if not ret:
            print("Error: Could not read frame.")
            break

        frame = cv2.flip(frame, 1)
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Placeholder for keypoints data
        keypoints = []

        # Send keypoints as JSON data to the browser
        if keypoints:
            await websocket.send(json.dumps(keypoints))

        # Display the frame
        cv2.imshow('Camera Feed', frame)

        # Break the loop if 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

        await asyncio.sleep(0.016)

    cap.release()
    cv2.destroyAllWindows()

# Start WebSocket server
async def start_server():
    async with websockets.serve(hand_landmark_server, "localhost", 8765):
        await asyncio.Future()  # run forever

if __name__ == "__main__":
    asyncio.run(start_server())
